// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FreshCo.Retail.FeatureFiles.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Checkout")]
    public partial class CheckoutFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Checkout.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Checkout", "\tAs a Supermarket checkout controller in FreshCo Retail fulfilment team,\r\n\tI want" +
                    " the ability to scan valid product(s), check their quantity and total,\r\n\tso that" +
                    " I can fulfill customer order(s)", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Configure check out service with porudtcs and discounts of scheme one and scannin" +
            "g a product")]
        [NUnit.Framework.CategoryAttribute("functional")]
        public virtual void ConfigureCheckOutServiceWithPorudtcsAndDiscountsOfSchemeOneAndScanningAProduct()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configure check out service with porudtcs and discounts of scheme one and scannin" +
                    "g a product", null, new string[] {
                        "functional"});
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Sku",
                        "Price"});
            table1.AddRow(new string[] {
                        "E8F89748-9E61-404A-BE81-558383019A9C",
                        "Gala Apple",
                        "A",
                        "0.30"});
            table1.AddRow(new string[] {
                        "E2824E0D-DDDF-401A-AD63-C4063A69B342",
                        "Organic Banana",
                        "B",
                        "0.20"});
            table1.AddRow(new string[] {
                        "0E97B027-297A-430C-9A8B-F3355DE57656",
                        "Conference Pear",
                        "C",
                        "0.40"});
            table1.AddRow(new string[] {
                        "7F32CDD8-DB7E-454B-BC37-2EDA560B20D1",
                        "Dates Deglet Nour",
                        "D",
                        "2.00"});
            table1.AddRow(new string[] {
                        "6C90A5C1-EDB0-4066-8DDE-F2F4C496FBEB",
                        "Organic Eggs",
                        "E",
                        "1.80"});
#line 21
 testRunner.Given("I configure database context with following products", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Sku",
                        "Quantity",
                        "Value"});
            table2.AddRow(new string[] {
                        "ABEB1FF1-7662-435F-B80A-55C5D300C488",
                        "A",
                        "3",
                        "0.10"});
            table2.AddRow(new string[] {
                        "75A3FE43-30BF-4A84-A5B7-5C44877C05DD",
                        "B",
                        "3",
                        "0.05"});
            table2.AddRow(new string[] {
                        "F73C013F-FC2E-4A91-B090-1675D09ED26E",
                        "C",
                        "3",
                        "0.10"});
            table2.AddRow(new string[] {
                        "B21B1146-5505-4022-B33C-5454ECDAAC32",
                        "D",
                        "3",
                        "0.50"});
            table2.AddRow(new string[] {
                        "ECE44C23-6DE7-4ED2-90FA-AE31573048D3",
                        "E",
                        "3",
                        "0.30"});
#line 28
 testRunner.And("I configure database context with following discounts \"scheme one\"", ((string)(null)), table2, "And ");
#line 35
 testRunner.And("I configure checkout service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.When("I scan a single product with a valid sku \"A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Sku",
                        "Price"});
            table3.AddRow(new string[] {
                        "E8F89748-9E61-404A-BE81-558383019A9C",
                        "Gala Apple",
                        "A",
                        "0.30"});
#line 37
 testRunner.Then("I get the following product", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scanning multiple valid sku should return valid products and valid totals")]
        public virtual void ScanningMultipleValidSkuShouldReturnValidProductsAndValidTotals()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scanning multiple valid sku should return valid products and valid totals", null, ((string[])(null)));
#line 41
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Sku",
                        "Price"});
            table4.AddRow(new string[] {
                        "E8F89748-9E61-404A-BE81-558383019A9C",
                        "Gala Apple",
                        "A",
                        "0.30"});
            table4.AddRow(new string[] {
                        "E2824E0D-DDDF-401A-AD63-C4063A69B342",
                        "Organic Banana",
                        "B",
                        "0.20"});
            table4.AddRow(new string[] {
                        "0E97B027-297A-430C-9A8B-F3355DE57656",
                        "Conference Pear",
                        "C",
                        "0.40"});
            table4.AddRow(new string[] {
                        "7F32CDD8-DB7E-454B-BC37-2EDA560B20D1",
                        "Dates Deglet Nour",
                        "D",
                        "2.00"});
            table4.AddRow(new string[] {
                        "6C90A5C1-EDB0-4066-8DDE-F2F4C496FBEB",
                        "Organic Eggs",
                        "E",
                        "1.80"});
#line 42
 testRunner.Given("I configure database context with following products", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Sku",
                        "Quantity",
                        "Value"});
            table5.AddRow(new string[] {
                        "ABEB1FF1-7662-435F-B80A-55C5D300C488",
                        "A",
                        "3",
                        "0.10"});
            table5.AddRow(new string[] {
                        "75A3FE43-30BF-4A84-A5B7-5C44877C05DD",
                        "B",
                        "3",
                        "0.05"});
            table5.AddRow(new string[] {
                        "F73C013F-FC2E-4A91-B090-1675D09ED26E",
                        "C",
                        "3",
                        "0.10"});
            table5.AddRow(new string[] {
                        "B21B1146-5505-4022-B33C-5454ECDAAC32",
                        "D",
                        "3",
                        "0.50"});
            table5.AddRow(new string[] {
                        "ECE44C23-6DE7-4ED2-90FA-AE31573048D3",
                        "E",
                        "3",
                        "0.30"});
#line 49
 testRunner.And("I configure database context with following discounts \"scheme one\"", ((string)(null)), table5, "And ");
#line 56
 testRunner.And("I configure checkout service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku",
                        "Quantity"});
            table6.AddRow(new string[] {
                        "A",
                        "5"});
            table6.AddRow(new string[] {
                        "B",
                        "3"});
            table6.AddRow(new string[] {
                        "C",
                        "5"});
            table6.AddRow(new string[] {
                        "D",
                        "1"});
            table6.AddRow(new string[] {
                        "E",
                        "1"});
#line 57
 testRunner.When("I scan the following products with valid sku and quantities", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Sku",
                        "Price",
                        "Quantity",
                        "Total"});
            table7.AddRow(new string[] {
                        "E8F89748-9E61-404A-BE81-558383019A9C",
                        "Gala Apple",
                        "A",
                        "0.30",
                        "5",
                        "1.50"});
            table7.AddRow(new string[] {
                        "E2824E0D-DDDF-401A-AD63-C4063A69B342",
                        "Organic Banana",
                        "B",
                        "0.20",
                        "3",
                        "0.60"});
            table7.AddRow(new string[] {
                        "0E97B027-297A-430C-9A8B-F3355DE57656",
                        "Conference Pears",
                        "C",
                        "0.40",
                        "5",
                        "2.00"});
            table7.AddRow(new string[] {
                        "7F32CDD8-DB7E-454B-BC37-2EDA560B20D1",
                        "Dates Deglet Nour",
                        "D",
                        "2.00",
                        "1",
                        "2.00"});
            table7.AddRow(new string[] {
                        "6C90A5C1-EDB0-4066-8DDE-F2F4C496FBEB",
                        "Organic Eggs",
                        "E",
                        "1.80",
                        "1",
                        "1.80"});
#line 64
 testRunner.Then("the following order lines are returned", ((string)(null)), table7, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product Total",
                        "Price Total"});
            table8.AddRow(new string[] {
                        "15",
                        "7.90"});
#line 71
 testRunner.And("the following order total is returned", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Applying dicsount to already scanned multiple valid sku should return valid produ" +
            "cts and valid totals")]
        public virtual void ApplyingDicsountToAlreadyScannedMultipleValidSkuShouldReturnValidProductsAndValidTotals()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Applying dicsount to already scanned multiple valid sku should return valid produ" +
                    "cts and valid totals", null, ((string[])(null)));
#line 75
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Sku",
                        "Price"});
            table9.AddRow(new string[] {
                        "E8F89748-9E61-404A-BE81-558383019A9C",
                        "Gala Apple",
                        "A",
                        "0.30"});
            table9.AddRow(new string[] {
                        "E2824E0D-DDDF-401A-AD63-C4063A69B342",
                        "Organic Banana",
                        "B",
                        "0.20"});
            table9.AddRow(new string[] {
                        "0E97B027-297A-430C-9A8B-F3355DE57656",
                        "Conference Pear",
                        "C",
                        "0.40"});
            table9.AddRow(new string[] {
                        "7F32CDD8-DB7E-454B-BC37-2EDA560B20D1",
                        "Dates Deglet Nour",
                        "D",
                        "2.00"});
            table9.AddRow(new string[] {
                        "6C90A5C1-EDB0-4066-8DDE-F2F4C496FBEB",
                        "Organic Eggs",
                        "E",
                        "1.80"});
#line 76
 testRunner.Given("I configure database context with following products", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Sku",
                        "Quantity",
                        "Value"});
            table10.AddRow(new string[] {
                        "ABEB1FF1-7662-435F-B80A-55C5D300C488",
                        "A",
                        "3",
                        "0.10"});
            table10.AddRow(new string[] {
                        "75A3FE43-30BF-4A84-A5B7-5C44877C05DD",
                        "B",
                        "3",
                        "0.05"});
            table10.AddRow(new string[] {
                        "F73C013F-FC2E-4A91-B090-1675D09ED26E",
                        "C",
                        "3",
                        "0.10"});
            table10.AddRow(new string[] {
                        "B21B1146-5505-4022-B33C-5454ECDAAC32",
                        "D",
                        "3",
                        "0.50"});
            table10.AddRow(new string[] {
                        "ECE44C23-6DE7-4ED2-90FA-AE31573048D3",
                        "E",
                        "3",
                        "0.30"});
#line 83
 testRunner.And("I configure database context with following discounts \"scheme one\"", ((string)(null)), table10, "And ");
#line 90
 testRunner.And("I configure checkout service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sku",
                        "Quantity"});
            table11.AddRow(new string[] {
                        "A",
                        "5"});
            table11.AddRow(new string[] {
                        "B",
                        "3"});
            table11.AddRow(new string[] {
                        "C",
                        "5"});
            table11.AddRow(new string[] {
                        "D",
                        "1"});
            table11.AddRow(new string[] {
                        "E",
                        "1"});
#line 91
 testRunner.And("I scan the following products with valid sku and quantities", ((string)(null)), table11, "And ");
#line 98
 testRunner.When("I apply already configured discounts \"scheme one\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product Total",
                        "Price Total"});
            table12.AddRow(new string[] {
                        "15",
                        "7.65"});
#line 99
 testRunner.Then("the following discounted order total is returned", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
